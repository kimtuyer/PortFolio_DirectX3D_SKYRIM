#ifndef Engine_Enum_h__
#define Engine_Enum_h__

namespace Engine
{
	enum WINMODE	{ MODE_FULL, MODE_WIN };

	enum BUFFERID	{ BUFFER_TRICOL, BUFFER_RCCOL, BUFFER_RCTEX, BUFFER_TERRAINTEX, BUFFER_CUBETEX, BUFFER_END };

	// DYNAMIC : 매 프레임마다 갱신을 해야할 컴포넌트, STATIC : 한 번 만들면 그대로 사용할 컴포넌트
	enum COMPONENTID { ID_DYNAMIC, ID_STATIC, ID_END };

	enum INFO		{ INFO_RIGHT, INFO_UP, INFO_LOOK, INFO_POS, INFO_END };
	enum ROTATION	{ ROT_X, ROT_Y, ROT_Z, ROT_END };

	enum TEXTUREID	{ TYPE_NORMAL, TYPE_CUBE, TYPE_END };

	enum RENDERID { RENDER_PRIORITY, RENDER_NONALPHA, RENDER_ALPHA, RENDER_UI, RENDER_END };

	enum  MOUSEKEYSTATE	{ DIM_LB, DIM_RB, DIM_MB, DIM_END };
	enum  MOUSEMOVESTATE { DIMS_X, DIMS_Y, DIMS_Z, DIMS_END };

	enum COLLTYPE { COL_FALSE, COL_TRUE, COL_END };

	enum CHILD { CHILD_LT, CHILD_RT, CHILD_LB, CHILD_RB,CHILD_END };
	enum CORNER { CORNER_LT, CORNER_RT, CORNER_LB, CORNER_RB,CORNER_END	};
	enum NEIGHBOR { NEIGHBOR_LEFT, NEIGHBOR_RIGHT, NEIGHBOR_TOP, NEIGHBOR_BOTTOM,	NEIGHBOR_END };


	//나
	enum DYNAMIC_OBJECT_ID {PLAYER, MONSTER_DRAUGR, MONSTER_GIANT, MONSTER_DRAGON, DYNAMIC_OBJECT_END
	};
	enum STATIC_OBJECT_ID { BRIDGE, STATIC_OBJECT_ID_END };

	enum OBJECT_ID { OBJECT_BACKGROUND, OBJECT_CAMERA, OBJECT_SKY, OBJECT_TERRAIN, OBJECT_Collider, OBJECT_Weapon, OBJECT_PLAYER_WEAPON, OBJECT_PLAYER, OBJECT_GuardMan, OBJECT_NPC, OBJECT_YARL, OBJECT_DRAUGR, OBJECT_GIANT, OBJECT_DRAGON, OBJECT_Breath, OBJECT_Trap, OBJECT_PBlood, OBJECT_MBlood, OBJECT_BRIDGE, OBJECT_WALL, OBJECT_Ground, OBJECT_HellFire, OBJECT_Bench, OBJECT_Wheel, OBJECT_UI, OBJECT_BAR, OBJECT_WORLDMAP, OBJECT_MAP, OBJECT_PLAYERMARKER, OBJECT_QuestMARKER, OBJECT_DIR, OBJECT_QuestBarMARKER, OBJECT_Dialog, OBJECT_MONSTERBAR, OBJECT_DragonBar, OBJECT_MONSTERHP, OBJECT_MONSTERHP2, OBJECT_MONSTERHP3, OBJECT_MONSTERHP4, OBJECT_DragonHP, OBJECT_MP, OBJECT_HP, OBJECT_SP, OBJECT_END };


	enum DRAGON_ATT_TYPE
	{
		DRAGON_ATT_HEAD, DRAGON_ATT_LWING, DRAGON_ATT_RWING, DRAGON_ATT_TAIL, DRAGON_ATT_BREATH
	};

	enum UI_INVENTORY_ID {
		UI_INVENTORY_Window0
		, UI_INVENTORY_Window3
		, UI_INVENTORY_Window1
		, UI_INVENTORY_Window2

		, UI_INVENTORY_NPC_ALL
		, UI_INVENTORY_NPC_WEAPON
		, UI_INVENTORY_NPC_ARMOR

		, UI_INVENTORY_ALL
		, UI_INVENTORY_WEAPON
		, UI_INVENTORY_ARMOR
		, UI_INVENTORY_POTION
		, UI_INVENTORY_E
		, UI_INVENTORY_R
		, UI_INVENTORY_F
		, UI_INVENTORY_C
		, UI_INVENTORY_ITEM


		, UI_INVENTORY_DECISION
		, UI_INVENTORY_EQUIP_Body
		, UI_INVENTORY_EQUIP_Gauntlet
		, UI_INVENTORY_EQUIP_Helmet
		, UI_INVENTORY_EQUIP_Boots
		, UI_INVENTORY_EQUIP_Weapon


		, UI_INVENTORY_ITEMWindow
		, UI_INVENTORY_HowmanyWindow
		
		, UI_INVENTORY_ITEMMESH
		, UI_INVENTORY_CraftWindow

		, UI_INVENTORY_Tab
		, UI_INVENTORY_Enter
		, UI_INVENTORY_NPC
		, UI_INVENTORY_Player


		, UI_Quest_QuestWindow
		, UI_Quest_QuestHorizon
		, UI_Quest_QuestVertical
		, UI_Quest_QuestTitle
		, UI_Quest_QuestObjective

		, UI_INVENTORY_END
	};

	enum Dialog_Type {DIALOG_DEFAULT, DIALOG_INVENTORY,  DIALOG_END};

	enum NPC_Type { NPC_Blacksmith, NPC_Guard,NPC_Forge,NPC_market,NPC_Barkeeper,NPC_1,NPC_Yarl,NPC_Tulius, NPC_END };

	enum ITEM_Type {
		ITEM_BODY, ITEM_GAUNTLET, ITEM_BOOTS, ITEM_HELMET
		, ITEM_WEAPON, ITEM_POTION, ITEM_MISC
		, ITEM_END
	};

	enum QUEST_State{
	Quest_Off,Quest_ON,Quest_Complete
		
	
	
	
	
	};

	enum Current_State { CURRENT_IDLE, CURRENT_BLOCK, CURRENT_BASH, CURRENT_ATTACK, CURRENT_POWERATTACK, CURRENT_ATTACKED, CURRENT_POWERATTACKED, CURRENT_DEATH, CURRENT_END };


	enum DraonBreath_Effect{ DraonBreath_Particle, DraonBreath_Beam};

}




#endif // Engine_Enum_h__
